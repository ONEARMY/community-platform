version: 2.1
######################################################################################################
# Pre-Requisites
#
# In order to use these scripts various env variables need to be set on CircleCI
# See `packages/documentation/docs/Deployment/circle-ci.md` for more information
#
# For general config info see: https://circleci.com/docs/2.0/configuration-reference
######################################################################################################

######################################################################################################
#  Orbs - preconfigured environments for running specific jobs
######################################################################################################

# node: circleci/node@4.1.0
# cypress: cypress-io/cypress@1
orbs:
  # for use with cimg image, to install web browsers
  browser-tools: circleci/browser-tools@1.1.3
  # used to enable slack integration (required api key set in environment)
  slack: circleci/slack@4.4.2

######################################################################################################
#  Aliases - code snippets that can be included inline in any other markup
######################################################################################################
aliases:
  # use a base image running node v16 with chrome/firefox browsers preinstalled
  - &docker
    - image: cimg/node:16.13.1-browsers
    # These can also be created as commands, but slighly tidier to just use inline
    # restore/install/save can all be done with a single circle-ci orb, but less flexible and breaks intellisense
  - &restore_yarn_cache
    restore_cache:
      name: Restore yarn cache
      keys:
        # https://circleci.com/docs/2.0/caching/
        # https://circleci.com/docs/2.0/yarn/
        # when lock file changes, use increasingly general patterns to restore cache (also need to change `save_cache` path)
        # NOTE - if changing base image or received cache permission denied may need to bump version v3->v4 or similar (clears after 15d)
        - yarn-packages-v11-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - yarn-packages-v11-{{ .Branch }}-
        - yarn-packages-v11-
  - &install_packages
    run:
      name: Install Packages
      command: yarn install --immutable
    # Example debugging commands for use troubleshooting caching (du will exit with status 141)
  - &check_folders
    run:
      name: check folders
      command: |
        ls -a ~/project
        du -a /home | sort -n -r | head -n 500
  - &save_yarn_cache
    save_cache:
      # note - if moving to workspaces include paths: https://discuss.circleci.com/t/yarn-cached-install-slow/34823/2
      # depending on whether enableGlobalCache is set to true or not (and windows/linux) these paths may vary
      paths:
        # global cache location
        # - ~/.yarn/berry/cache
        # local cache location
        - ~/project/.yarn/cache
      key: yarn-packages-v11-{{ .Branch }}-{{ checksum "yarn.lock" }}

  - &filter_only_production
    filters:
      branches:
        only:
          - production
  - &filter_only_master
    filters:
      branches:
        only:
          - master
  - &filter_only_ci_test
    filters:
      branches:
        only:
          - ci/circle-ci-release

  - &slack_custom_hold_message
    # Message shown in slack to approve new deployment - edit in https://app.slack.com/block-kit-builder
    # Based on: https://github.com/CircleCI-Public/slack-orb/tree/master/src/message_templates
    custom: |
      {
        "blocks": [
          {
            "type": "header",
            "text": {
              "type": "plain_text",
              "text": ":rocket: New Update - Ready for Launch",
              "emoji": true
            }
          },
          {
            "type": "section",
            "fields": [
              {
                "type": "mrkdwn",
                "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
              }
            ],
            "accessory": {
              "type": "image",
              "image_url": "https://yt3.ggpht.com/ytc/AAUvwni_34CcLQsIhNo1d1A2zUK0pNPzipCV9oM1gvkNNw=s900-c-k-c0x00ffffff-no-rj",
              "alt_text": "Logo"
            }
          },
          {
            "type": "actions",
            "elements": [
              {
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "Go To Approval"
                },
                "url": "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}"
              }
            ]
          }
        ]
      }

  - &slack_custom_success_message
    custom: |
      {
        "blocks": [
          {
            "type": "header",
            "text": {
              "type": "plain_text",
              "text": "Deploy Success :tada:",
              "emoji": true
            }
          },
          {
            "type": "section",
            "fields": [
              {
                "type": "mrkdwn",
                "text": "*Job*: ${CIRCLE_JOB}"
              },
              {
                "type": "mrkdwn",
                "text": "*When*: $(date +'%m/%d/%Y %T')"
              },
              {
                "type": "mrkdwn",
                "text": "*Tag*: $CIRCLE_TAG"
              }
            ],
            "accessory": {
              "type": "image",
              "image_url": "https://yt3.ggpht.com/ytc/AAUvwni_34CcLQsIhNo1d1A2zUK0pNPzipCV9oM1gvkNNw=s900-c-k-c0x00ffffff-no-rj",
              "alt_text": "CircleCI logo"
            }
          },
          {
            "type": "actions",
            "elements": [
              {
                "type": "button",
                "text": {
                  "type": "plain_text",
                  "text": "Build Logs"
                },
                "url": "${CIRCLE_BUILD_URL}"
              }
            ]
          }
        ]
      }

######################################################################################################
#  Commands - Reusable collections of steps
######################################################################################################
commands:
  setup_repo:
    description: checkout repo and install packages
    # no parameters currently used, but could be specified here to use within steps
    # parameters:
    steps:
      - checkout
      - *restore_yarn_cache
      - *install_packages
      - *save_yarn_cache
  inject_instance_configuration:
    steps:
      - run:
          name: Inject target environment configuration
          command: |
            yarn build:inject-config

  firebase_deploy:
    description: Deploy to Firebase
    parameters:
      token:
        type: string
        default: ''
        description: Firebase Deploy Token
      use_application_credentials:
        type: boolean
        default: false
        description: Specify if GOOGLE_APPLICATION_CREDENTIALS_JSON var used instead of firebase token
      alias:
        type: string
        default: 'default'
        description: Firebase project alias to deploy to
    steps:
      - run:
          name: Install Firebase Tools
          command: yarn add -D firebase-tools
      - when:
          condition: <<parameters.use_application_credentials>>
          steps:
            - run:
                name: Export application credentials
                command: echo $GOOGLE_APPLICATION_CREDENTIALS_JSON > service_account.json
            - run:
                name: Deploy to Firebase
                command: ./node_modules/.bin/firebase deploy --debug -P << parameters.alias >>
                environment:
                  GOOGLE_APPLICATION_CREDENTIALS: service_account.json
      - when:
          condition:
            not: <<parameters.use_application_credentials>>
          steps:
            - run:
                name: Deploy to Firebase
                command: ./node_modules/.bin/firebase deploy --token=<< parameters.token >> -P << parameters.alias >>

examples:

######################################################################################################
#  Jobs - Independently specified lists of tasks and environments for execution
######################################################################################################
jobs:
  lint-commits:
    docker: *docker
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: '.'
      - run:
          name: Linting commits
          command: |
            rm package.json
            npm config set package-lock false
            npm i @types/node @commitlint/types @commitlint/config-conventional --force
            npx commitlint --from=$(git merge-base remotes/origin/${CIRCLE_BRANCH} master) --verbose
  # Prepare node module caches so that future tasks run more quickly
  # NOTE - not currently used as we only have one workflow
  setup:
    docker: *docker
    steps:
      - setup_repo

  test_functions:
    docker: 
      - image: timbru31/java-node:alpine-12
    resource_class: small
    steps:
      - setup_repo
      - run: cd functions && yarn && yarn build && yarn emulator:test

  # Create a production build
  # NOTE - not currently used in test workflow as different build_env required for each machine
  test_unit:
    docker: *docker
    resource_class: small
    steps:
      # whilst checkout-install could be persisted from previous step, that is less efficient than just using caching
      - checkout
      - *restore_yarn_cache
      - run:
          name: Install dependencies
          command: yarn workspaces focus one-army-community-platform
      - run:
          command: yarn run test:unit
  build:
    docker: *docker
    environment:
      GENERATE_SOURCEMAP: 'false'
      SKIP_PREFLIGHT_CHECK: 'true'
    # `medium` is the max allowed size for free builds (helps with out-of-memory issues) - https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: medium+
    steps:
      # whilst checkout-install could be persisted from previous step, that is less efficient than just using caching
      - checkout
      - *restore_yarn_cache
      - run:
          name: Install dependencies
          command: yarn workspaces focus one-army-community-platform
      # As environment variables can only be set from strings add additional dynamic variable mappings here
      # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237/13
      - run:
          name: Set branch environment
          command: |
            echo 'export REACT_APP_BRANCH=${CIRCLE_BRANCH}' >> $BASH_ENV
            echo 'export NODE_OPTIONS=--max-old-space-size=4096' >> $BASH_ENV
            echo 'export REACT_APP_PROJECT_VERSION=${CIRCLE_SHA1}' >> $BASH_ENV
      - run:
          name: Check environment variables
          command: |
            echo REACT_APP_BRANCH=$REACT_APP_BRANCH NODE_OPTIONS=$NODE_OPTIONS
            echo $REACT_APP_PROJECT_VERSION
      - run:
          command: yarn build
      - persist_to_workspace:
          root: .
          paths:
            - build
  check-functions:
    docker: *docker
    environment:
      GENERATE_SOURCEMAP: 'false'
    # `medium` is the max allowed size for free builds (helps with out-of-memory issues) - https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: small
    steps:
      # whilst checkout-install could be persisted from previous step, that is less efficient than just using caching
      - checkout
      - *restore_yarn_cache
      - run:
          name: Install dependencies
          command: yarn workspaces focus functions
      # As environment variables can only be set from strings add additional dynamic variable mappings here
      # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237/13
      - run:
          name: Set branch environment
          command: |
            echo 'export NODE_OPTIONS=--max-old-space-size=4096' >> $BASH_ENV
      - run:
          command: cd functions && yarn build
  storybook:
    docker: *docker
    resource_class: medium
    steps:
      - setup_repo
      - attach_workspace:
          at: '.'
      - run:
          command: yarn workspace oa-storybook build
  deploy:
    docker: *docker
    resource_class: small
    parameters:
      # optional environment variables to set during build process
      DEPLOY_ALIAS:
        type: string
        default: 'default'
      NOTIFY_SLACK:
        type: boolean
        default: true
    steps:
      - setup_repo
      - attach_workspace:
          at: '.'
      - inject_instance_configuration
      - firebase_deploy:
          # token: $FIREBASE_DEPLOY_TOKEN # This should be set as environment variable
          alias: << parameters.DEPLOY_ALIAS >>
          use_application_credentials: true
      - when:
          condition: << parameters.NOTIFY_SLACK >>
          steps:
            - slack/notify:
                event: fail
                mentions: '@Chris Clarke'
                template: basic_fail_1
            - slack/notify:
                event: pass
                <<: *slack_custom_success_message

  # Run cypress e2e tests on chrome and firefox
  test_e2e:
    docker: *docker
    # build matrix will run 4 parallel builds handled by cypress, so don't need to specify more here
    parallelism: 1
    parameters:
      CI_NODE:
        type: integer
      CI_BROWSER:
        type: string
    steps:
      - setup_repo
      # retrieve build folder
      - attach_workspace:
          at: '.'
      - inject_instance_configuration
      # install testing browsers are required
      - when:
          condition:
            equal: ['chrome', << parameters.CI_BROWSER >>]
          steps:
            - browser-tools/install-chrome
      - when:
          condition:
            equal: ['firefox', << parameters.CI_BROWSER >>]
          steps:
            - browser-tools/install-firefox
      # call main testing script
      - run:
          command: npm run test ci prod
          environment:
            CI_BROWSER: << parameters.CI_BROWSER >>
            CI_NODE: << parameters.CI_NODE >>
            CI_GROUP: 2x-<< parameters.CI_BROWSER >>
  release: 
    docker: *docker
    resource_class: small
    steps: 
      - setup_repo
      - attach_workspace:
          at: '.'
      - run: 
          command: npx semantic-release

######################################################################################################
#  Workflows - Collections of jobs to define overall processes
######################################################################################################
workflows:
  version: 2
  main_workflow:
    # by default jobs will run concurrently, so specify requires if want to run sequentially
    jobs:
      - lint-commits:
          name: Lint commits
          filters:
              branches:
                ignore:
                  - production
      #---------------------- Test ----------------------
      # Note - when calling test we also let the test script handle building as it injects random variables for seeding the DB
      - build:
          requires:
            - 'Lint commits'
          name: Build Application
          context: build-context
      - check-functions:
          requires:
            -  'Lint commits'
          name: Check Functions
          context: build-context
          filters:
            branches:
              ignore:
                - production
      - test_unit:
          name: 'Unit tests'
          requires:
            - 'Lint commits'
          filters:
            branches:
              ignore:
                - production
      - storybook:
          name: Build Storybook
          requires:
            - 'Lint commits'
          filters:
            branches:
              ignore:
                - production
      - test_functions: 
          name: 'Cloud Function tests'
          context: build-context
          requires:
            - 'Lint commits'
          filters:
            branches:
              ignore:
                - production
      - test_e2e:
          name: e2e-<< matrix.CI_BROWSER >>-<< matrix.CI_NODE >>
          requires:
            - 'Build Application'
            - 'Unit tests'
            - 'Check Functions'
            - 'Build Storybook'
          context:
            - e2e-tests
          matrix:
            parameters:
              CI_NODE: [1, 2]
              CI_BROWSER: ['chrome', 'firefox']
          filters:
            branches:
              ignore:
                - production
      #---------------------- Development Instances Build and Deploy ----------------------
      - deploy:
          name: 'Deploy: dev.onearmy.world'
          requires:
            - test_e2e
          <<: *filter_only_master
          DEPLOY_ALIAS: 'default'
          NOTIFY_SLACK: false
          context:
            - circle-ci-slack-context
            - community-platform-dev
      - deploy:
          name: 'Deploy: dev.community.projectkamp.com'
          requires:
            - test_e2e
          <<: *filter_only_master
          DEPLOY_ALIAS: project-kamp-development
          NOTIFY_SLACK: false
          context:
            - circle-ci-slack-context
            - project-kamp-dev
      - release: 
          requires: 
            - 'Deploy: community.preciousplastic.com'
            - 'Deploy: community.projectkamp.com'
          name: Release new version to GitHub
          context: 
            - release-context
      # Require manual approval on CirclCI website prior to release
      - build:
          name: Build Production Release
          context: build-context
          <<: *filter_only_production
      - hold:
          name: approve_release
          type: approval
          requires:
            - Build Production Release
          <<: *filter_only_production
      # Send a slack notification to approve the hold above (required config supplied in circleci-slack-context)
      - slack/on-hold:
          name: notify_slack_pending_approval
          context: circle-ci-slack-context
          requires:
            - Build Production Release
          <<: *filter_only_production
          <<: *slack_custom_hold_message
      - deploy:
          name: 'Deploy: community.preciousplastic.com'
          requires:
            - 'approve_release'
          <<: *filter_only_production
          DEPLOY_ALIAS: 'production'
          NOTIFY_SLACK: true
          context:
            - circle-ci-slack-context
            - community-platform-production
      - deploy:
          name: 'Deploy: community.projectkamp.com'
          requires:
            - 'approve_release'
          <<: *filter_only_production
          DEPLOY_ALIAS: project-kamp-production
          NOTIFY_SLACK: true
          context:
            - circle-ci-slack-context
            - project-kamp-production
