import * as admin from 'firebase-admin'

const db = admin.firestore()

/* example from firebase serve
firebase > hitPostCounter('5c40bcdb1e40e6199b70c808')
Sent request to function.
firebase > info: User function triggered, starting execution
info: hit post counter called 5c40bcdb1e40e6199b70c808
{ rawRequest:
  IncomingMessage {
  _readableState:
    ReadableState {
    objectMode: false,
      highWaterMark: 16384,
      buffer: [Object],
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: true,
      endEmitted: true,
      reading: false,
      sync: false,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      defaultEncoding: 'utf8',
      ranOut: false,
      awaitDrain: 0,
      readingMore: false,
      decoder: null,
      encoding: null },
  readable: false,
    domain: null,
    _events: {},
  _eventsCount: 0,
    _maxListeners: undefined,
    socket:
  Socket {
    connecting: false,
      _hadError: false,
      _handle: [Object],
      _parent: null,
      _host: null,
      _readableState: [Object],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState: [Object],
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Object],
      _server: [Object],
      _idleTimeout: 120000,
      _idleNext: [Object],
      _idlePrev: [Object],
      _idleStart: 15950,
      parser: [Object],
      on: [Function: socketOnWrap],
    _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage: [Object] },
  connection:
    Socket {
    connecting: false,
      _hadError: false,
      _handle: [Object],
      _parent: null,
      _host: null,
      _readableState: [Object],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState: [Object],
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Object],
      _server: [Object],
      _idleTimeout: 120000,
      _idleNext: [Object],
      _idlePrev: [Object],
      _idleStart: 15950,
      parser: [Object],
      on: [Function: socketOnWrap],
    _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage: [Object] },
  httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    headers:
  { connection: 'close',
    'content-length': '35',
    'content-type': 'application/json',
    accept: 'application/json',
    host: 'localhost:5000' },
  rawHeaders:
    [ 'connection',
      'close',
      'content-length',
      '35',
      'content-type',
      'application/json',
      'accept',
      'application/json',
      'host',
      'localhost:5000' ],
      trailers: {},
  rawTrailers: [],
    upgrade: false,
    url: '/',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client:
  Socket {
    connecting: false,
      _hadError: false,
      _handle: [Object],
      _parent: null,
      _host: null,
      _readableState: [Object],
      readable: true,
      domain: null,
      _events: [Object],
      _eventsCount: 10,
      _maxListeners: undefined,
      _writableState: [Object],
      writable: true,
      allowHalfOpen: true,
      destroyed: false,
      _bytesDispatched: 0,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Object],
      _server: [Object],
      _idleTimeout: 120000,
      _idleNext: [Object],
      _idlePrev: [Object],
      _idleStart: 15950,
      parser: [Object],
      on: [Function: socketOnWrap],
    _paused: false,
      read: [Function],
      _consuming: true,
      _httpMessage: [Object] },
  _consuming: true,
    _dumped: false,
    next: [Function: next],
  baseUrl: '',
    originalUrl: '/',
    _parsedUrl:
  Url {
    protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/',
      path: '/',
      href: '/',
      _raw: '/' },
  params: {},
  query: {},
  res:
    ServerResponse {
    domain: null,
      _events: [Object],
      _eventsCount: 1,
      _maxListeners: undefined,
      output: [],
      outputEncodings: [],
      outputCallbacks: [],
      outputSize: 0,
      writable: true,
      _last: false,
      upgrading: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedHeader: {},
    _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      socket: [Object],
      connection: [Object],
      _header: null,
      _headers: [Object],
      _headerNames: [Object],
      _onPendingData: [Function: updateOutgoingData],
    req: [Circular],
      locals: {} },
  body: { data: '5c40bcdb1e40e6199b70c808' },
  _body: true,
    length: undefined,
    read: [Function],
    rawBody: <Buffer 7b 22 64 61 74 61 22 3a 22 35 63 34 30 62 63 64 62 31 65 34 30 65 36 31 39 39 62 37 30 63 38 30 38 22 7d> } }

RESPONSE RECEIVED FROM FUNCTION: 200, {
  "result": null
}
info: Execution took 12637 ms, user function completed successfully*/
export const hitPostCounter = ({'_id': postId}) => {
  console.log('hitPostCounter called...')
  console.log('id: ' + postId)
  db.collection('discussions').doc(postId).get().then((data) => data.ref).then((ref) => {
    console.log(ref)

    // ref.set({viewCount: ref.viewCount + 1})
    // Update count in a transaction
    return db.runTransaction(t => {
      return t.get(ref).then(doc => {
        const new_count = doc.data().viewCount + 1;
        t.update(ref, { viewCount: new_count });
      });
    });
  })

}