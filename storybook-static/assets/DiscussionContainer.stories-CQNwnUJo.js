import{j as n}from"./jsx-runtime-CexXSJP5.js";import{r as u}from"./index-BP8_t0zE.js";import{c as a}from"./utils-DHhG0ype.js";import{D as e}from"./DiscussionContainer-CLLlEKOH.js";import"./index-D_kXk1yT.js";import"./CommentList-DBT6BFFt.js";import"./Button-IpaWXJZw.js";import"./Icon-BPUW_xqH.js";import"./emotion-styled.browser.esm-Dz2BNYeh.js";import"./extends-CF3RwP-h.js";import"./parseProps-780b287c.browser.esm-DiCerVr_.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-UWD3gXM2.js";import"./contact-DD4r1-LP.js";import"./supporter-D7hp958O.js";import"./icon-arrow-down-CJeToCJe.js";import"./icon-star-active-ClN6U5FF.js";import"./theme-ui-core-jsx-runtime.browser.esm-CH0qhC10.js";import"./hoist-non-react-statics.cjs-CQI8syxn.js";import"./theme-ui-components.esm-D81fpbIc.js";import"./ButtonShowReplies-C2bGSGDr.js";import"./DiscussionTitle-yWu3ewBI.js";import"./CommentItem-OLAy_dMR.js";import"./default_member-D4npYF8S.js";import"./ActionSet-CimRGZsL.js";import"./ConfirmModal-ChmBN60m.js";import"./Modal-CqEalRwc.js";import"./index-BBRV8eG_.js";import"./index-Snk9MO9S.js";import"./DisplayDate-Qat9vqcB.js";import"./typeof-QjJsDpFa.js";import"./EditComment-BF7s07eM.js";import"./objectWithoutPropertiesLoose-CAYKN5F1.js";import"./FieldTextarea-DUOjZhtf.js";import"./CharacterCount-BAI4G5VS.js";import"./LinkifyText-DcaiGz_R.js";import"./ExternalLink-D1e4dbP-.js";import"./InternalLink-3Gv-Nz2v.js";import"./components-CyP20DXM.js";import"./index-CQ-1if_X.js";import"./theme-ui-core.browser.esm-CvTdiiil.js";import"./emotion-react.browser.esm-BYoRxRk_.js";import"./cjs-Clfm10Kj.js";import"./Username-CerBWMtQ.js";import"./UserBadge-Dj8F6YQJ.js";import"./CreateReply-DKMN9iwN.js";import"./CreateComment-D8hhdOa1.js";import"./MemberBadge-BgPE2gx5.js";const xe={title:"Commenting/DiscussionContainer",component:e},I=a(3),q=a(15),m={render:()=>n.jsx(e,{comment:"",comments:I,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!1})},s={render:()=>n.jsx(e,{comments:[],handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:"",onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!1})},r={render:()=>{const[o,s]=u.useState("");return n.jsx(e,{comments:I,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:s,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!0})}},i={render:()=>{const[o,s]=u.useState("");return n.jsx(e,{comments:q,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:s,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!0})}},l={render:()=>{const[o,s]=u.useState(""),t=a(3);return t[0].replies=a(2),n.jsx(e,{supportReplies:!0,comments:t,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:s,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!0,isSubmitting:!1,onSubmitReply:async(e,o)=>alert(`reply to commentId: ${e} with comment: ${o}`)})}};var p,c,g,h,C,S,v,P,b,f,E,R,x,L,D;m.parameters={...m.parameters,docs:{...null==(p=m.parameters)?void 0:p.docs,source:{originalSource:"{\n  render: () => {\n    return <DiscussionContainer comment={''} comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={false} />;\n  }\n}",...null==(g=null==(c=m.parameters)?void 0:c.docs)?void 0:g.source}}},s.parameters={...s.parameters,docs:{...null==(h=s.parameters)?void 0:h.docs,source:{originalSource:"{\n  render: () => {\n    return <DiscussionContainer comments={[]} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={''} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={false} />;\n  }\n}",...null==(S=null==(C=s.parameters)?void 0:C.docs)?void 0:S.source}}},r.parameters={...r.parameters,docs:{...null==(v=r.parameters)?void 0:v.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    return <DiscussionContainer comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={true} />;\n  }\n}",...null==(b=null==(P=r.parameters)?void 0:P.docs)?void 0:b.source}}},i.parameters={...i.parameters,docs:{...null==(f=i.parameters)?void 0:f.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    return <DiscussionContainer comments={expandableFakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={true} />;\n  }\n}",...null==(R=null==(E=i.parameters)?void 0:E.docs)?void 0:R.source}}},l.parameters={...l.parameters,docs:{...null==(x=l.parameters)?void 0:x.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    const fakeComments = createFakeComments(3);\n    fakeComments[0].replies = createFakeComments(2);\n    return <DiscussionContainer supportReplies={true} comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={true} isSubmitting={false} onSubmitReply={async (commentId, comment) => alert(`reply to commentId: ${commentId} with comment: ${comment}`)} />;\n  }\n}",...null==(D=null==(L=l.parameters)?void 0:L.docs)?void 0:D.source}}};const Le=["Default","NoComments","LoggedIn","Expandable","WithReplies"];export{m as Default,i as Expandable,r as LoggedIn,s as NoComments,l as WithReplies,Le as __namedExportsOrder,xe as default};