import{j as t,r as u}from"./iframe-Cjt2dpkB.js";import{c as a}from"./utils-BCwJP_Xt.js";import{D as e}from"./DiscussionContainer-C9Q1wKNP.js";import"./index-D_kXk1yT.js";import"./CommentList-BWNuq5A4.js";import"./Button-R05CiQRL.js";import"./Icon-CiP0oQ4l.js";import"./emotion-styled.browser.esm-BALKyJef.js";import"./extends-CF3RwP-h.js";import"./contact-DD4r1-LP.js";import"./supporter-D7hp958O.js";import"./icon-arrow-down-CJeToCJe.js";import"./icon-star-active-ClN6U5FF.js";import"./theme-ui-core-jsx-runtime.browser.esm-b99HV7AQ.js";import"./theme-ui-components.esm-BVN6jzx1.js";import"./ButtonShowReplies-BK6Qs-Rq.js";import"./DiscussionTitle-BXDHKRbx.js";import"./CommentItem--q5kC2EA.js";import"./default_member-D4npYF8S.js";import"./ActionSet-yO_muSxW.js";import"./ConfirmModal-BvGMBsDy.js";import"./Modal-Dgrw1ljJ.js";import"./index-BPA856Jf.js";import"./DisplayDate-C_WACF00.js";import"./typeof-QjJsDpFa.js";import"./EditComment-BOTdZgWc.js";import"./objectWithoutPropertiesLoose-Dsqj8S3w.js";import"./FieldTextarea-CIEhPM76.js";import"./CharacterCount-D87PXp-p.js";import"./LinkifyText-DLY92HiD.js";import"./ExternalLink-TCSr8aGz.js";import"./InternalLink-pbdvBiwI.js";import"./Username-CS0Ro9Gy.js";import"./UserBadge-CEZDISVa.js";import"./CreateReply-CBVy9Sfw.js";import"./CreateComment-BQtsSM7z.js";import"./MemberBadge-DSfxKaOz.js";const ge={title:"Commenting/DiscussionContainer",component:e},I=a(3),q=a(15),s={render:()=>t.jsx(e,{comment:"",comments:I,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!1})},m={render:()=>t.jsx(e,{comments:[],handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:"",onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!1})},r={render:()=>{const[o,n]=u.useState("");return t.jsx(e,{comments:I,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:n,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!0})}},i={render:()=>{const[o,n]=u.useState("");return t.jsx(e,{comments:q,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:n,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!0})}},l={render:()=>{const[o,n]=u.useState(""),s=a(3);return s[0].replies=a(2),t.jsx(e,{supportReplies:!0,comments:s,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:n,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!0,isSubmitting:!1,onSubmitReply:async(e,o)=>alert(`reply to commentId: ${e} with comment: ${o}`)})}};var c,p,g,h,C,S,v,P,b,f,E,R,x,L,D;s.parameters={...s.parameters,docs:{...null==(c=s.parameters)?void 0:c.docs,source:{originalSource:"{\n  render: () => {\n    return <DiscussionContainer comment={''} comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={false} />;\n  }\n}",...null==(g=null==(p=s.parameters)?void 0:p.docs)?void 0:g.source}}},m.parameters={...m.parameters,docs:{...null==(h=m.parameters)?void 0:h.docs,source:{originalSource:"{\n  render: () => {\n    return <DiscussionContainer comments={[]} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={''} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={false} />;\n  }\n}",...null==(S=null==(C=m.parameters)?void 0:C.docs)?void 0:S.source}}},r.parameters={...r.parameters,docs:{...null==(v=r.parameters)?void 0:v.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    return <DiscussionContainer comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={true} />;\n  }\n}",...null==(b=null==(P=r.parameters)?void 0:P.docs)?void 0:b.source}}},i.parameters={...i.parameters,docs:{...null==(f=i.parameters)?void 0:f.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    return <DiscussionContainer comments={expandableFakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={true} />;\n  }\n}",...null==(R=null==(E=i.parameters)?void 0:E.docs)?void 0:R.source}}},l.parameters={...l.parameters,docs:{...null==(x=l.parameters)?void 0:x.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    const fakeComments = createFakeComments(3);\n    fakeComments[0].replies = createFakeComments(2);\n    return <DiscussionContainer supportReplies={true} comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={true} isSubmitting={false} onSubmitReply={async (commentId, comment) => alert(`reply to commentId: ${commentId} with comment: ${comment}`)} />;\n  }\n}",...null==(D=null==(L=l.parameters)?void 0:L.docs)?void 0:D.source}}};const he=["Default","NoComments","LoggedIn","Expandable","WithReplies"];export{s as Default,i as Expandable,r as LoggedIn,m as NoComments,l as WithReplies,he as __namedExportsOrder,ge as default};