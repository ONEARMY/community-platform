import{j as n}from"./jsx-runtime-CexXSJP5.js";import{r as u}from"./index-BP8_t0zE.js";import{c as a}from"./utils-BRZF2j4e.js";import{D as e}from"./DiscussionContainer-BRBU4btr.js";import"./index-D_kXk1yT.js";import"./CommentList-B-qzbVQH.js";import"./Button-C1Ojgool.js";import"./Icon-QQOudn0t.js";import"./emotion-styled.browser.esm-mtFmFg5E.js";import"./extends-CF3RwP-h.js";import"./emotion-element-43c6fea0.browser.esm-B3fc_abn.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-UWD3gXM2.js";import"./supporter-D7hp958O.js";import"./icon-arrow-down-CJeToCJe.js";import"./icon-star-active-ClN6U5FF.js";import"./theme-ui-core-jsx-runtime.browser.esm-BGkPH8X1.js";import"./hoist-non-react-statics.cjs-CQI8syxn.js";import"./theme-ui-components.esm-D5Q63Fx1.js";import"./ButtonShowReplies-ZT7Vti7G.js";import"./DiscussionTitle-SzGpbUup.js";import"./CommentItem-Cl9aHhem.js";import"./ConfirmModal-Dt5cFTQC.js";import"./Modal-BOMfnYvB.js";import"./index-BBRV8eG_.js";import"./index-Snk9MO9S.js";import"./DisplayDate-DkkWAs67.js";import"./typeof-QjJsDpFa.js";import"./EditComment-Df_uT_wH.js";import"./objectWithoutPropertiesLoose-gpp6Tpz-.js";import"./index.esm-D0u3ndg0.js";import"./FieldTextarea-UaUPC5mQ.js";import"./CharacterCount-BalRNeyX.js";import"./LinkifyText-DCAeCrPS.js";import"./ExternalLink-DFvpNOKB.js";import"./InternalLink-kE4CsJJO.js";import"./components-B4bBPZFA.js";import"./index-DDbH4maQ.js";import"./Username-BLNpr3HZ.js";import"./CreateReply-C23RfNUx.js";import"./CreateComment-B6nwxTUF.js";import"./MemberBadge-69En_t8p.js";const ve={title:"Discussions/DiscussionContainer",component:e},I=a(3),q=a(15),s={render:()=>n.jsx(e,{comment:"",comments:I,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!1})},m={render:()=>n.jsx(e,{comments:[],handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:"",onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!1})},r={render:()=>{const[o,s]=u.useState("");return n.jsx(e,{comments:I,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:s,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!0})}},i={render:()=>{const[o,s]=u.useState("");return n.jsx(e,{comments:q,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:s,onMoreComments:()=>null,onSubmit:()=>null,onSubmitReply:()=>Promise.resolve(),isSubmitting:!1,isLoggedIn:!0})}},l={render:()=>{const[o,s]=u.useState(""),t=a(3);return t[0].replies=a(2),n.jsx(e,{supportReplies:!0,comments:t,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:s,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!0,isSubmitting:!1,onSubmitReply:async(e,o)=>alert(`reply to commentId: ${e} with comment: ${o}`)})}};var d,p,g,h,C,S,v,P,b,f,E,R,x,D,L;s.parameters={...s.parameters,docs:{...null==(d=s.parameters)?void 0:d.docs,source:{originalSource:"{\n  render: () => {\n    return <DiscussionContainer comment={''} comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={false} />;\n  }\n}",...null==(g=null==(p=s.parameters)?void 0:p.docs)?void 0:g.source}}},m.parameters={...m.parameters,docs:{...null==(h=m.parameters)?void 0:h.docs,source:{originalSource:"{\n  render: () => {\n    return <DiscussionContainer comments={[]} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={''} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={false} />;\n  }\n}",...null==(S=null==(C=m.parameters)?void 0:C.docs)?void 0:S.source}}},r.parameters={...r.parameters,docs:{...null==(v=r.parameters)?void 0:v.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    return <DiscussionContainer comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={true} />;\n  }\n}",...null==(b=null==(P=r.parameters)?void 0:P.docs)?void 0:b.source}}},i.parameters={...i.parameters,docs:{...null==(f=i.parameters)?void 0:f.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    return <DiscussionContainer comments={expandableFakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} onSubmitReply={() => Promise.resolve()} isSubmitting={false} isLoggedIn={true} />;\n  }\n}",...null==(R=null==(E=i.parameters)?void 0:E.docs)?void 0:R.source}}},l.parameters={...l.parameters,docs:{...null==(x=l.parameters)?void 0:x.docs,source:{originalSource:"{\n  render: () => {\n    const [comment, setComment] = useState<string>('');\n    const fakeComments = createFakeComments(3);\n    fakeComments[0].replies = createFakeComments(2);\n    return <DiscussionContainer supportReplies={true} comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={true} isSubmitting={false} onSubmitReply={async (commentId, comment) => alert(`reply to commentId: ${commentId} with comment: ${comment}`)} />;\n  }\n}",...null==(L=null==(D=l.parameters)?void 0:D.docs)?void 0:L.source}}};const Pe=["Default","NoComments","LoggedIn","Expandable","WithReplies"];export{s as Default,i as Expandable,r as LoggedIn,m as NoComments,l as WithReplies,Pe as __namedExportsOrder,ve as default};