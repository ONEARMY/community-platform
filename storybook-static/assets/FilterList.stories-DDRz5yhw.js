import{j as s}from"./jsx-runtime-CexXSJP5.js";import{r as p}from"./index-BP8_t0zE.js";import{F as v}from"./FilterList-Y_O-4jPz.js";import"./ButtonIcon-BgGeW-Be.js";import"./Icon-QQOudn0t.js";import"./emotion-styled.browser.esm-mtFmFg5E.js";import"./extends-CF3RwP-h.js";import"./emotion-element-43c6fea0.browser.esm-B3fc_abn.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-UWD3gXM2.js";import"./supporter-D7hp958O.js";import"./icon-arrow-down-CJeToCJe.js";import"./icon-star-active-ClN6U5FF.js";import"./theme-ui-core-jsx-runtime.browser.esm-BGkPH8X1.js";import"./hoist-non-react-statics.cjs-CQI8syxn.js";import"./theme-ui-components.esm-D5Q63Fx1.js";import"./CardButton-D47sjuxH.js";import"./MemberBadge-69En_t8p.js";const z={title:"Map/FilterList",component:v},F=[{label:"Workspace",type:"workspace"},{label:"Machine Builder",type:"machine-builder"},{label:"Collection Point",type:"collection-point"},{label:"Want to get started",type:"member"}],a=()=>{const[e,t]=p.useState([]);return s.jsx("div",{style:{maxWidth:"500px"},children:s.jsx(v,{activeFilters:e,availableFilters:F,onFilterChange:i=>{const r=i.toLowerCase();return e.find((e=>e===r))?t(e.filter((e=>e!==r))):t((e=>[...e,r]))}})})},o=()=>{const[e,t]=p.useState([]);return s.jsxs("div",{style:{maxWidth:"500px"},children:[s.jsx(v,{activeFilters:e,availableFilters:[F[0]],onFilterChange:i=>{const r=i.toLowerCase();return e.find((e=>e===r))?t(e.filter((e=>e!==r))):t((e=>[...e,r]))}}),"(Shouldn't see anything, only renders for two or more)"]})},c=()=>{const[e,t]=p.useState([]);return s.jsxs("div",{style:{maxWidth:"500px"},children:[s.jsx(v,{activeFilters:e,availableFilters:[F[0],F[1]],onFilterChange:i=>{const r=i.toLowerCase();return e.find((e=>e===r))?t(e.filter((e=>e!==r))):t((e=>[...e,r]))}}),"(No buttons rendered)"]})};var m,f,u,g,x,h,b,C,y;a.parameters={...a.parameters,docs:{...null==(m=a.parameters)?void 0:m.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n  const onFilterChange = (label: string) => {\n    const filter = label.toLowerCase();\n    const isFilterPresent = !!activeFilters.find(existing => existing === filter);\n    if (isFilterPresent) {\n      return setActiveFilters(activeFilters.filter(f => f !== filter));\n    }\n    return setActiveFilters(existing => [...existing, filter]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <FilterList activeFilters={activeFilters} availableFilters={availableFilters} onFilterChange={onFilterChange} />\n    </div>;\n}",...null==(u=null==(f=a.parameters)?void 0:f.docs)?void 0:u.source}}},o.parameters={...o.parameters,docs:{...null==(g=o.parameters)?void 0:g.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n  const onFilterChange = (label: string) => {\n    const filter = label.toLowerCase();\n    const isFilterPresent = !!activeFilters.find(existing => existing === filter);\n    if (isFilterPresent) {\n      return setActiveFilters(activeFilters.filter(f => f !== filter));\n    }\n    return setActiveFilters(existing => [...existing, filter]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <FilterList activeFilters={activeFilters} availableFilters={[availableFilters[0]]} onFilterChange={onFilterChange} />\n      (Shouldn't see anything, only renders for two or more)\n    </div>;\n}",...null==(h=null==(x=o.parameters)?void 0:x.docs)?void 0:h.source}}},c.parameters={...c.parameters,docs:{...null==(b=c.parameters)?void 0:b.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n  const onFilterChange = (label: string) => {\n    const filter = label.toLowerCase();\n    const isFilterPresent = !!activeFilters.find(existing => existing === filter);\n    if (isFilterPresent) {\n      return setActiveFilters(activeFilters.filter(f => f !== filter));\n    }\n    return setActiveFilters(existing => [...existing, filter]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <FilterList activeFilters={activeFilters} availableFilters={[availableFilters[0], availableFilters[1]]} onFilterChange={onFilterChange} />\n      (No buttons rendered)\n    </div>;\n}",...null==(y=null==(C=c.parameters)?void 0:C.docs)?void 0:y.source}}};const D=["Basic","OnlyOne","OnlyTwo"];export{a as Basic,o as OnlyOne,c as OnlyTwo,D as __namedExportsOrder,z as default};