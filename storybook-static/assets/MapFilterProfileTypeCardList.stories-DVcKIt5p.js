import{j as s}from"./jsx-runtime-CexXSJP5.js";import{r as u}from"./index-BP8_t0zE.js";import{M as F}from"./MapFilterProfileTypeCardList-ZCAnTPLM.js";import"./ButtonIcon-BvS3rcBE.js";import"./Icon-CpKwKOZA.js";import"./emotion-styled.browser.esm-Dz2BNYeh.js";import"./extends-CF3RwP-h.js";import"./parseProps-780b287c.browser.esm-DiCerVr_.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-UWD3gXM2.js";import"./supporter-D7hp958O.js";import"./icon-arrow-down-CJeToCJe.js";import"./icon-star-active-ClN6U5FF.js";import"./theme-ui-core-jsx-runtime.browser.esm-CH0qhC10.js";import"./hoist-non-react-statics.cjs-CQI8syxn.js";import"./theme-ui-components.esm-DCiJ1mMX.js";import"./CardButton-UFEWOkeB.js";import"./MemberBadge-BFCUvfGJ.js";import"./theme-ui-core.browser.esm-CIov4Ln1.js";import"./emotion-react.browser.esm-BYoRxRk_.js";import"./cjs-Clfm10Kj.js";const H={title:"Map/FilterList",component:F},r=[{label:"Workspace",slug:"workspace",filterType:"ProfileType"},{label:"Machine Builder",slug:"machine-builder",filterType:"ProfileType"},{label:"Collection Point",slug:"collection-point",filterType:"ProfileType"},{label:"Want to get started",slug:"member",filterType:"ProfileType"}],a=()=>{const[e,t]=u.useState([]);return s.jsx("div",{style:{maxWidth:"500px"},children:s.jsx(F,{activeFilters:e,availableFilters:r,onFilterChange:e=>r.find((t=>t.slug==e.slug))?t((t=>t.filter((t=>t!==e)))):t((t=>[...t,e]))})})},p=()=>{const[e,t]=u.useState([]);return s.jsxs("div",{style:{maxWidth:"500px"},children:[s.jsx(F,{activeFilters:e,availableFilters:[r[0]],onFilterChange:e=>r.find((t=>t.slug==e.slug))?t((t=>t.filter((t=>t!==e)))):t((t=>[...t,e]))}),"(Shouldn't see anything, only renders for two or more)"]})},c=()=>{const[e,t]=u.useState([]);return s.jsxs("div",{style:{maxWidth:"500px"},children:[s.jsx(F,{activeFilters:e,availableFilters:[r[0],r[1]],onFilterChange:e=>r.find((t=>t.slug==e.slug))?t((t=>t.filter((t=>t!==e)))):t((t=>[...t,e]))}),"(No buttons rendered)"]})};var m,g,v,f,x,h,y,O,P;a.parameters={...a.parameters,docs:{...null==(m=a.parameters)?void 0:m.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<MapFilterOptionsList>([]);\n  const onFilterChange = (option: MapFilterOption) => {\n    const isFilterPresent = !!availableFilters.find(pinFilter => pinFilter.slug == option.slug);\n    if (isFilterPresent) {\n      return setActiveFilters(filter => filter.filter(existingOption => existingOption !== option));\n    }\n    return setActiveFilters(existingOptions => [...existingOptions, option]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <MapFilterProfileTypeCardList activeFilters={activeFilters} availableFilters={availableFilters} onFilterChange={onFilterChange} />\n    </div>;\n}",...null==(v=null==(g=a.parameters)?void 0:g.docs)?void 0:v.source}}},p.parameters={...p.parameters,docs:{...null==(f=p.parameters)?void 0:f.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<MapFilterOptionsList>([]);\n  const onFilterChange = (option: MapFilterOption) => {\n    const isFilterPresent = !!availableFilters.find(pinFilter => pinFilter.slug == option.slug);\n    if (isFilterPresent) {\n      return setActiveFilters(filter => filter.filter(existingOption => existingOption !== option));\n    }\n    return setActiveFilters(existingOptions => [...existingOptions, option]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <MapFilterProfileTypeCardList activeFilters={activeFilters} availableFilters={[availableFilters[0]]} onFilterChange={onFilterChange} />\n      (Shouldn't see anything, only renders for two or more)\n    </div>;\n}",...null==(h=null==(x=p.parameters)?void 0:x.docs)?void 0:h.source}}},c.parameters={...c.parameters,docs:{...null==(y=c.parameters)?void 0:y.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<MapFilterOptionsList>([]);\n  const onFilterChange = (option: MapFilterOption) => {\n    const isFilterPresent = !!availableFilters.find(pinFilter => pinFilter.slug == option.slug);\n    if (isFilterPresent) {\n      return setActiveFilters(filter => filter.filter(existingOption => existingOption !== option));\n    }\n    return setActiveFilters(existingOptions => [...existingOptions, option]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <MapFilterProfileTypeCardList activeFilters={activeFilters} availableFilters={[availableFilters[0], availableFilters[1]]} onFilterChange={onFilterChange} />\n      (No buttons rendered)\n    </div>;\n}",...null==(P=null==(O=c.parameters)?void 0:O.docs)?void 0:P.source}}};const I=["Basic","OnlyOne","OnlyTwo"];export{a as Basic,p as OnlyOne,c as OnlyTwo,I as __namedExportsOrder,H as default};