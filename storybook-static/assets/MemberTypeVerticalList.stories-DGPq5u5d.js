import{j as l}from"./jsx-runtime-CexXSJP5.js";import{r as g}from"./index-BP8_t0zE.js";import{M as c}from"./MemberTypeVerticalList.client-CJBuYLlL.js";import"./CardButton-N2uDQfPt.js";import"./theme-ui-components.esm-BngKL4Rx.js";import"./parseProps-780b287c.browser.esm-DiCerVr_.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-UWD3gXM2.js";import"./theme-ui-core-jsx-runtime.browser.esm-CH0qhC10.js";import"./hoist-non-react-statics.cjs-CQI8syxn.js";import"./MemberBadge-CEGEtBDf.js";import"./icon-star-active-ClN6U5FF.js";import"./theme-ui-core.browser.esm-CvTdiiil.js";import"./emotion-react.browser.esm-BYoRxRk_.js";import"./cjs-Clfm10Kj.js";import"./VerticalList-DBZcb9JX.js";import"./emotion-styled.browser.esm-Dz2BNYeh.js";import"./extends-CF3RwP-h.js";import"./Icon-C4bZh_Yj.js";import"./contact-DD4r1-LP.js";import"./supporter-D7hp958O.js";import"./icon-arrow-down-CJeToCJe.js";const H={title:"Map/MemberTypeVerticalList",component:c},t=[{label:"Workspace",_id:"workspace",filterType:"profileType"},{label:"Machine Builder",_id:"machine-builder",filterType:"profileType"},{label:"Collection Point",_id:"collection-point",filterType:"profileType"},{label:"Want to get started",_id:"member",filterType:"profileType"}],n=()=>{const[e,i]=g.useState([]);return l.jsx("div",{style:{maxWidth:"500px"},children:l.jsx(c,{activeFilters:e,availableFilters:t,onFilterChange:e=>t.find((i=>i._id==e._id))?i((i=>i.filter((i=>i!==e)))):i((i=>[...i,e]))})})},s=()=>{const[e,i]=g.useState([]);return l.jsxs("div",{style:{maxWidth:"500px"},children:[l.jsx(c,{activeFilters:e,availableFilters:[t[0]],onFilterChange:e=>t.find((i=>i._id==e._id))?i((i=>i.filter((i=>i!==e)))):i((i=>[...i,e]))}),"(Shouldn't see anything, only renders for two or more)"]})};var m,d,F,f,u,v,y,b,x;t.parameters={...t.parameters,docs:{...null==(m=t.parameters)?void 0:m.docs,source:{originalSource:"[{\n  label: 'Workspace',\n  _id: 'workspace',\n  filterType: 'profileType'\n}, {\n  label: 'Machine Builder',\n  _id: 'machine-builder',\n  filterType: 'profileType'\n}, {\n  label: 'Collection Point',\n  _id: 'collection-point',\n  filterType: 'profileType'\n}, {\n  label: 'Want to get started',\n  _id: 'member',\n  filterType: 'profileType'\n}]",...null==(F=null==(d=t.parameters)?void 0:d.docs)?void 0:F.source}}},n.parameters={...n.parameters,docs:{...null==(f=n.parameters)?void 0:f.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<MapFilterOptionsList>([]);\n  const onFilterChange = (option: MapFilterOption) => {\n    const isFilterPresent = !!availableFilters.find(pinFilter => pinFilter._id == option._id);\n    if (isFilterPresent) {\n      return setActiveFilters(filter => filter.filter(existingOption => existingOption !== option));\n    }\n    return setActiveFilters(existingOptions => [...existingOptions, option]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <MemberTypeVerticalList activeFilters={activeFilters} availableFilters={availableFilters} onFilterChange={onFilterChange} />\n    </div>;\n}",...null==(v=null==(u=n.parameters)?void 0:u.docs)?void 0:v.source}}},s.parameters={...s.parameters,docs:{...null==(y=s.parameters)?void 0:y.docs,source:{originalSource:"() => {\n  const [activeFilters, setActiveFilters] = useState<MapFilterOptionsList>([]);\n  const onFilterChange = (option: MapFilterOption) => {\n    const isFilterPresent = !!availableFilters.find(pinFilter => pinFilter._id == option._id);\n    if (isFilterPresent) {\n      return setActiveFilters(filter => filter.filter(existingOption => existingOption !== option));\n    }\n    return setActiveFilters(existingOptions => [...existingOptions, option]);\n  };\n  return <div style={{\n    maxWidth: '500px'\n  }}>\n      <MemberTypeVerticalList activeFilters={activeFilters} availableFilters={[availableFilters[0]]} onFilterChange={onFilterChange} />\n      (Shouldn't see anything, only renders for two or more)\n    </div>;\n}",...null==(x=null==(b=s.parameters)?void 0:b.docs)?void 0:x.source}}};const I=["availableFilters","Basic","OnlyOne"];export{n as Basic,s as OnlyOne,I as __namedExportsOrder,t as availableFilters,H as default};