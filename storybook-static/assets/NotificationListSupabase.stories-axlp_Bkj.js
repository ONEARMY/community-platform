import{j as l}from"./iframe-0bjfOHWf.js";import{a as c}from"./utils-BAmvWkQX.js";import{N as a}from"./NotificationListSupabase-CqmoWT_j.js";import"./index-xJp9Kd2E.js";import"./Button-CaTRC2rF.js";import"./Icon-CESGBDcG.js";import"./emotion-styled.browser.esm-TwZXfCVg.js";import"./extends-CF3RwP-h.js";import"./contact-DD4r1-LP.js";import"./flag-unknown-BwNbunrQ.js";import"./icon-arrow-down-CJeToCJe.js";import"./icon-star-active-ClN6U5FF.js";import"./theme-ui-core-jsx-runtime.browser.esm-CAWuiYUL.js";import"./theme-ui-components.esm-C01e04jm.js";import"./ButtonIcon-DMPQwWU0.js";import"./InternalLink-B2p9-pqc.js";import"./Loader-BSYIEq51.js";import"./NotificationItemSupabase-DQGMSkYl.js";import"./DisplayDate-D7AOn7ir.js";import"./typeof-QjJsDpFa.js";import"./index-Cn2wB4rc.js";const I={title:"Components/NotificationListSupabase",component:a},d=c({isRead:!1}),p=c({isRead:!0}),o=()=>l.jsx(a,{isUpdatingNotifications:!1,markAllRead:()=>console.log("markAllRead"),markRead:()=>console.log("markRead"),modalDismiss:()=>console.log("modalDismiss"),notifications:[d,p]}),i=()=>l.jsx(a,{isUpdatingNotifications:!1,markAllRead:()=>console.log("markAllRead"),markRead:()=>console.log("markRead"),modalDismiss:()=>console.log("modalDismiss"),notifications:[p]});var s,t,e,m,r,n;o.__docgenInfo={description:"",methods:[],displayName:"Default"},i.__docgenInfo={description:"",methods:[],displayName:"NoNewNotifications"},o.parameters={...o.parameters,docs:{...null==(s=o.parameters)?void 0:s.docs,source:{originalSource:"() => <NotificationListSupabase isUpdatingNotifications={false} markAllRead={() => console.log('markAllRead')} markRead={() => console.log('markRead')} modalDismiss={() => console.log('modalDismiss')} notifications={[newsReplyNotification, questionCommentNotification]} />",...null==(e=null==(t=o.parameters)?void 0:t.docs)?void 0:e.source}}},i.parameters={...i.parameters,docs:{...null==(m=i.parameters)?void 0:m.docs,source:{originalSource:"() => <NotificationListSupabase isUpdatingNotifications={false} markAllRead={() => console.log('markAllRead')} markRead={() => console.log('markRead')} modalDismiss={() => console.log('modalDismiss')} notifications={[questionCommentNotification]} />",...null==(n=null==(r=i.parameters)?void 0:r.docs)?void 0:n.source}}};const O=["Default","NoNewNotifications"];export{o as Default,i as NoNewNotifications,O as __namedExportsOrder,I as default};