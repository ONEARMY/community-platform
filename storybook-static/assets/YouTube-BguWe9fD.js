import{r as S,R as g}from"./iframe-DcRPcggf.js";import{M as w,p as b,a as T,g as U,c as I,b as L}from"./VideoPlayer-C16ocb_n.js";import"./index-4CWCEE2N.js";import"./theme-ui-components.esm-BmKkfoQf.js";import"./theme-ui-core-jsx-runtime.browser.esm-DMR0i_-_.js";var O=Object.defineProperty,k=(e,t,a)=>t in e?O(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,a=(e,t,a)=>(k(e,"symbol"!=typeof t?t+"":t,a),a);const V="https://www.youtube.com/iframe_api",_="YT",v="onYouTubeIframeAPIReady",p=/[?&](?:list|channel)=([a-zA-Z0-9_-]+)/,m=/user\/([a-zA-Z0-9_-]+)\/?/,M=/youtube-nocookie\.com/,N="https://www.youtube-nocookie.com";class E extends S.Component{constructor(){super(...arguments),a(this,"callPlayer",I),a(this,"parsePlaylist",(e=>{if(e instanceof Array)return{listType:"playlist",playlist:e.map(this.getID).join(",")};if(p.test(e)){const[,t]=e.match(p);return{listType:"playlist",list:t.replace(/^UC/,"UU")}}if(m.test(e)){const[,t]=e.match(m);return{listType:"user_uploads",list:t}}return{}})),a(this,"onStateChange",(e=>{const{data:t}=e,{onPlay:a,onPause:s,onBuffer:o,onBufferEnd:i,onEnded:n,onReady:r,loop:l,config:{playerVars:p,onUnstarted:y}}=this.props,{UNSTARTED:c,PLAYING:h,PAUSED:u,BUFFERING:d,ENDED:m,CUED:P}=window[_].PlayerState;if(t===c&&y(),t===h&&(a(),i()),t===u&&s(),t===d&&o(),t===m){const e=!!this.callPlayer("getPlaylist");l&&!e&&(p.start?this.seekTo(p.start):this.play()),n()}t===P&&r()})),a(this,"mute",(()=>{this.callPlayer("mute")})),a(this,"unmute",(()=>{this.callPlayer("unMute")})),a(this,"ref",(e=>{this.container=e}))}componentDidMount(){this.props.onMount&&this.props.onMount(this)}getID(e){return!e||e instanceof Array||p.test(e)?null:e.match(w)[1]}load(e,t){const{playing:a,muted:s,playsinline:o,controls:i,loop:n,config:r,onError:l}=this.props,{playerVars:y,embedOptions:c}=r,h=this.getID(e);if(t)return p.test(e)||m.test(e)||e instanceof Array?void this.player.loadPlaylist(this.parsePlaylist(e)):void this.player.cueVideoById({videoId:h,startSeconds:b(e)||y.start,endSeconds:T(e)||y.end});U(V,_,v,(e=>e.loaded)).then((t=>{this.container&&(this.player=new t.Player(this.container,{width:"100%",height:"100%",videoId:h,playerVars:{autoplay:a?1:0,mute:s?1:0,controls:i?1:0,start:b(e),end:T(e),origin:window.location.origin,playsinline:o?1:0,...this.parsePlaylist(e),...y},events:{onReady:()=>{n&&this.player.setLoop(!0),this.props.onReady()},onPlaybackRateChange:e=>this.props.onPlaybackRateChange(e.data),onPlaybackQualityChange:e=>this.props.onPlaybackQualityChange(e),onStateChange:this.onStateChange,onError:e=>l(e.data)},host:M.test(e)?N:void 0,...c}))}),l),c.events&&console.warn("Using `embedOptions.events` will likely break things. Use ReactPlayer\u2019s callback props instead, eg onReady, onPlay, onPause")}play(){this.callPlayer("playVideo")}pause(){this.callPlayer("pauseVideo")}stop(){document.body.contains(this.callPlayer("getIframe"))&&this.callPlayer("stopVideo")}seekTo(e,t=!1){this.callPlayer("seekTo",e),!t&&!this.props.playing&&this.pause()}setVolume(e){this.callPlayer("setVolume",100*e)}setPlaybackRate(e){this.callPlayer("setPlaybackRate",e)}setLoop(e){this.callPlayer("setLoop",e)}getDuration(){return this.callPlayer("getDuration")}getCurrentTime(){return this.callPlayer("getCurrentTime")}getSecondsLoaded(){return this.callPlayer("getVideoLoadedFraction")*this.getDuration()}render(){const{display:e}=this.props,t={width:"100%",height:"100%",display:e};return g.createElement("div",{style:t},g.createElement("div",{ref:this.ref}))}}a(E,"displayName","YouTube"),a(E,"canPlay",L.youtube);export{E as default};