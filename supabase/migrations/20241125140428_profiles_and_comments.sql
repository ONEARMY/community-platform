create table "public"."categories" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "tenant_id" text not null,
    "name" text not null
);


alter table "public"."categories" enable row level security;

create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "comment" text not null,
    "source_id" bigint,
    "parent_id" bigint,
    "tenant_id" text not null default ''::text,
    "created_by" bigint,
    "source_type" text not null,
    "modified_at" timestamp with time zone,
    "source_id_legacy" text,
    "deleted" boolean,
    "legacy_id" text
);


alter table "public"."comments" enable row level security;

create table "public"."profiles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "firebase_auth_id" text not null,
    "display_name" text not null,
    "is_verified" boolean not null default false,
    "country" text,
    "photo_url" text,
    "about" text,
    "tenant_id" text not null,
    "username" text not null default ''::text,
    "roles" text[]
);


alter table "public"."profiles" enable row level security;

create table "public"."questions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "created_by" bigint,
    "deleted" boolean,
    "modified_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "comment_count" bigint default '0'::bigint,
    "description" text not null,
    "moderation" text,
    "slug" text not null,
    "previous_slugs" text[],
    "category" bigint,
    "tags" bigint[],
    "title" text not null,
    "total_views" bigint,
    "tenant_id" text not null,
    "fts" tsvector generated always as (to_tsvector('english'::regconfig, ((title || ' '::text) || description))) stored
);


alter table "public"."questions" enable row level security;

CREATE UNIQUE INDEX categories_pkey ON public.categories USING btree (id);

CREATE INDEX comments_created_at_source_type_source_id_tenant_id_idx ON public.comments USING btree (created_at, source_type, source_id, tenant_id);

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

CREATE INDEX profiles_firebase_auth_id_idx ON public.profiles USING btree (firebase_auth_id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE INDEX profiles_tenant_id_is_verified_created_at_idx ON public.profiles USING btree (tenant_id, is_verified, created_at);

CREATE UNIQUE INDEX question_pkey ON public.questions USING btree (id);

CREATE INDEX questions_deleted_moderation_category_total_views_tags_crea_idx ON public.questions USING btree (deleted, moderation, category, total_views, tags, created_at, comment_count, created_by);

CREATE INDEX questions_tags_idx ON public.questions USING gin (tags);

alter table "public"."categories" add constraint "categories_pkey" PRIMARY KEY using index "categories_pkey";

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."questions" add constraint "question_pkey" PRIMARY KEY using index "question_pkey";

alter table "public"."comments" add constraint "comment_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."comments" validate constraint "comment_created_by_fkey";

alter table "public"."questions" add constraint "question_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."questions" validate constraint "question_created_by_fkey";

alter table "public"."questions" add constraint "questions_category_fkey" FOREIGN KEY (category) REFERENCES categories(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."questions" validate constraint "questions_category_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.comment_authors_by_source_id_legacy(source_id_legacy_input text)
 RETURNS SETOF text
 LANGUAGE sql
AS $function$
  SELECT DISTINCT (p.username)
  FROM comments c
  INNER JOIN profiles p
  ON c.created_by = p.id
  WHERE c.source_id_legacy = source_id_legacy_input
$function$
;

CREATE OR REPLACE FUNCTION public.update_comment_count()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  IF (TG_OP = 'INSERT') THEN
    IF NEW.source_type IS NOT NULL AND NEW.source_id IS NOT NULL THEN
      IF NEW.source_type = 'questions' THEN
        UPDATE questions SET comment_count = comment_count + 1
        WHERE id = NEW.source_id;
      ELSIF NEW.source_type = 'research' THEN
        UPDATE research SET comment_count = comment_count + 1
        WHERE id = NEW.source_id;
      ELSIF NEW.source_type = 'howtos' THEN
        UPDATE howtos SET comment_count = comment_count + 1
        WHERE id = NEW.source_id;
      END IF;
    ELSE
      RAISE NOTICE 'Warning: source_type or source_id is NULL';
    END IF;

  ELSIF (TG_OP = 'DELETE') THEN
    IF OLD.source_type IS NOT NULL AND OLD.source_id IS NOT NULL THEN
      IF OLD.source_type = 'questions' THEN
        UPDATE questions SET comment_count = comment_count - 1
        WHERE id = OLD.source_id;
      ELSIF OLD.source_type = 'research' THEN
        UPDATE research SET comment_count = comment_count - 1
        WHERE id = OLD.source_id;
      ELSIF OLD.source_type = 'howtos' THEN
        UPDATE howtos SET comment_count = comment_count - 1
        WHERE id = OLD.source_id;
      END IF;
    ELSE
      RAISE NOTICE 'Warning: OLD.source_type or OLD.source_id is NULL';
    END IF;
  END IF;

  -- Explicit return for the trigger function
  RETURN NULL;
END;$function$
;

grant delete on table "public"."categories" to "anon";

grant insert on table "public"."categories" to "anon";

grant references on table "public"."categories" to "anon";

grant select on table "public"."categories" to "anon";

grant trigger on table "public"."categories" to "anon";

grant truncate on table "public"."categories" to "anon";

grant update on table "public"."categories" to "anon";

grant delete on table "public"."categories" to "authenticated";

grant insert on table "public"."categories" to "authenticated";

grant references on table "public"."categories" to "authenticated";

grant select on table "public"."categories" to "authenticated";

grant trigger on table "public"."categories" to "authenticated";

grant truncate on table "public"."categories" to "authenticated";

grant update on table "public"."categories" to "authenticated";

grant delete on table "public"."categories" to "service_role";

grant insert on table "public"."categories" to "service_role";

grant references on table "public"."categories" to "service_role";

grant select on table "public"."categories" to "service_role";

grant trigger on table "public"."categories" to "service_role";

grant truncate on table "public"."categories" to "service_role";

grant update on table "public"."categories" to "service_role";

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."questions" to "anon";

grant insert on table "public"."questions" to "anon";

grant references on table "public"."questions" to "anon";

grant select on table "public"."questions" to "anon";

grant trigger on table "public"."questions" to "anon";

grant truncate on table "public"."questions" to "anon";

grant update on table "public"."questions" to "anon";

grant delete on table "public"."questions" to "authenticated";

grant insert on table "public"."questions" to "authenticated";

grant references on table "public"."questions" to "authenticated";

grant select on table "public"."questions" to "authenticated";

grant trigger on table "public"."questions" to "authenticated";

grant truncate on table "public"."questions" to "authenticated";

grant update on table "public"."questions" to "authenticated";

grant delete on table "public"."questions" to "service_role";

grant insert on table "public"."questions" to "service_role";

grant references on table "public"."questions" to "service_role";

grant select on table "public"."questions" to "service_role";

grant trigger on table "public"."questions" to "service_role";

grant truncate on table "public"."questions" to "service_role";

grant update on table "public"."questions" to "service_role";

create policy "tenant_isolation"
on "public"."categories"
as permissive
for all
to public
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));


create policy "tenant_isolation"
on "public"."comments"
as permissive
for all
to public
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));


create policy "tenant_isolation"
on "public"."profiles"
as permissive
for all
to public
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));


create policy "tenant_isolation"
on "public"."questions"
as permissive
for all
to public
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));


CREATE TRIGGER update_comment_count AFTER INSERT OR DELETE ON public.comments FOR EACH ROW EXECUTE FUNCTION update_comment_count();


