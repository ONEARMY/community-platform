create table "public"."messages" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "message" text not null,
    "sender_id" bigint not null,
    "receiver_id" bigint,
    "tenant_id" text not null
);


alter table "public"."messages" enable row level security;

create table "public"."tenant_settings" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "site_name" text not null,
    "site_url" text not null,
    "message_sign_off" text,
    "tenant_id" text not null,
    "email_from" text,
    "site_image" text
);


alter table "public"."tenant_settings" enable row level security;

CREATE UNIQUE INDEX messages_pkey ON public.messages USING btree (id);

CREATE UNIQUE INDEX tenant_settings_pkey ON public.tenant_settings USING btree (id);

alter table "public"."messages" add constraint "messages_pkey" PRIMARY KEY using index "messages_pkey";

alter table "public"."tenant_settings" add constraint "tenant_settings_pkey" PRIMARY KEY using index "tenant_settings_pkey";

alter table "public"."messages" add constraint "messages_from_fkey" FOREIGN KEY (sender_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_from_fkey";

alter table "public"."messages" add constraint "messages_sender_id_fkey" FOREIGN KEY (sender_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."messages" validate constraint "messages_sender_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_user_email_by_id(id uuid)
 RETURNS TABLE(email character varying)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
BEGIN
  RETURN QUERY SELECT au.email FROM auth.users au WHERE au.id = $1;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.comment_authors_by_source_id(source_id_input bigint)
 RETURNS SETOF text
 LANGUAGE sql
AS $function$
  SELECT DISTINCT (p.username)
  FROM comments c
  INNER JOIN profiles p
  ON c.created_by = p.id
  WHERE c.source_id = source_id_input
$function$
;

CREATE OR REPLACE FUNCTION public.get_useful_votes_count_by_content_id(p_content_type content_types, p_content_ids bigint[])
 RETURNS TABLE(content_id bigint, count bigint)
 LANGUAGE plpgsql
AS $function$
BEGIN
  RETURN QUERY
  SELECT v.content_id, COUNT(*) as count
  FROM public.useful_votes v
  WHERE content_type = p_content_type
  AND v.content_id = ANY(p_content_ids)
  GROUP BY v.content_id;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_id_by_email(email text)
 RETURNS TABLE(id uuid)
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  RETURN QUERY SELECT au.id FROM auth.users au WHERE au.email = $1;
END;$function$
;

CREATE OR REPLACE FUNCTION public.questions_search_fields(questions)
 RETURNS text
 LANGUAGE sql
AS $function$
  SELECT $1.title || ' ' || $1.description;
$function$
;

grant delete on table "public"."messages" to "anon";

grant insert on table "public"."messages" to "anon";

grant references on table "public"."messages" to "anon";

grant select on table "public"."messages" to "anon";

grant trigger on table "public"."messages" to "anon";

grant truncate on table "public"."messages" to "anon";

grant update on table "public"."messages" to "anon";

grant delete on table "public"."messages" to "authenticated";

grant insert on table "public"."messages" to "authenticated";

grant references on table "public"."messages" to "authenticated";

grant select on table "public"."messages" to "authenticated";

grant trigger on table "public"."messages" to "authenticated";

grant truncate on table "public"."messages" to "authenticated";

grant update on table "public"."messages" to "authenticated";

grant delete on table "public"."messages" to "service_role";

grant insert on table "public"."messages" to "service_role";

grant references on table "public"."messages" to "service_role";

grant select on table "public"."messages" to "service_role";

grant trigger on table "public"."messages" to "service_role";

grant truncate on table "public"."messages" to "service_role";

grant update on table "public"."messages" to "service_role";

grant delete on table "public"."tenant_settings" to "anon";

grant insert on table "public"."tenant_settings" to "anon";

grant references on table "public"."tenant_settings" to "anon";

grant select on table "public"."tenant_settings" to "anon";

grant trigger on table "public"."tenant_settings" to "anon";

grant truncate on table "public"."tenant_settings" to "anon";

grant update on table "public"."tenant_settings" to "anon";

grant delete on table "public"."tenant_settings" to "authenticated";

grant insert on table "public"."tenant_settings" to "authenticated";

grant references on table "public"."tenant_settings" to "authenticated";

grant select on table "public"."tenant_settings" to "authenticated";

grant trigger on table "public"."tenant_settings" to "authenticated";

grant truncate on table "public"."tenant_settings" to "authenticated";

grant update on table "public"."tenant_settings" to "authenticated";

grant delete on table "public"."tenant_settings" to "service_role";

grant insert on table "public"."tenant_settings" to "service_role";

grant references on table "public"."tenant_settings" to "service_role";

grant select on table "public"."tenant_settings" to "service_role";

grant trigger on table "public"."tenant_settings" to "service_role";

grant truncate on table "public"."tenant_settings" to "service_role";

grant update on table "public"."tenant_settings" to "service_role";

create policy "message_isolation"
on "public"."messages"
as restrictive
for all
to authenticated
using (((auth.uid() IN ( SELECT profiles.auth_id
   FROM profiles
  WHERE (profiles.id = messages.sender_id))) OR (auth.uid() IN ( SELECT profiles.auth_id
   FROM profiles
  WHERE (profiles.id = messages.receiver_id)))));


create policy "tenant_isolation"
on "public"."messages"
as permissive
for all
to authenticated
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));


create policy "tenant_isolation"
on "public"."tenant_settings"
as permissive
for all
to public
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));



