alter type "public"."content_types" ADD VALUE 'news';

create table "public"."news" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "created_by" bigint,
    "deleted" boolean,
    "modified_at" timestamp with time zone default (now() AT TIME ZONE 'utc'::text),
    "comment_count" bigint default '0'::bigint,
    "body" text not null,
    "moderation" text,
    "slug" text not null,
    "previous_slugs" text[],
    "category" bigint,
    "tags" bigint[],
    "title" text not null,
    "total_views" bigint,
    "tenant_id" text not null,
    "fts" tsvector generated always as (to_tsvector('english'::regconfig, ((title || ' '::text) || body))) stored,
    "hero_image" json
);


alter table "public"."news" enable row level security;

CREATE INDEX news_category_idx ON public.news USING btree (category);

CREATE INDEX news_created_by_idx ON public.news USING btree (created_by);

CREATE INDEX news_deleted_moderation_category_total_views_tags_created_a_idx ON public.news USING btree (deleted, moderation, category, total_views, tags, created_at, comment_count, created_by);

CREATE UNIQUE INDEX news_pkey ON public.news USING btree (id);

CREATE INDEX news_tags_idx ON public.news USING gin (tags);

CREATE UNIQUE INDEX news_tenant_id_slug_key ON public.news USING btree (tenant_id, slug);

alter table "public"."news" add constraint "news_pkey" PRIMARY KEY using index "news_pkey";

alter table "public"."news" add constraint "news_category_fkey" FOREIGN KEY (category) REFERENCES categories(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."news" validate constraint "news_category_fkey";

alter table "public"."news" add constraint "news_created_by_fkey" FOREIGN KEY (created_by) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."news" validate constraint "news_created_by_fkey";

alter table "public"."news" add constraint "news_tenant_id_slug_key" UNIQUE using index "news_tenant_id_slug_key";

grant delete on table "public"."news" to "anon";

grant insert on table "public"."news" to "anon";

grant references on table "public"."news" to "anon";

grant select on table "public"."news" to "anon";

grant trigger on table "public"."news" to "anon";

grant truncate on table "public"."news" to "anon";

grant update on table "public"."news" to "anon";

grant delete on table "public"."news" to "authenticated";

grant insert on table "public"."news" to "authenticated";

grant references on table "public"."news" to "authenticated";

grant select on table "public"."news" to "authenticated";

grant trigger on table "public"."news" to "authenticated";

grant truncate on table "public"."news" to "authenticated";

grant update on table "public"."news" to "authenticated";

grant delete on table "public"."news" to "service_role";

grant insert on table "public"."news" to "service_role";

grant references on table "public"."news" to "service_role";

grant select on table "public"."news" to "service_role";

grant trigger on table "public"."news" to "service_role";

grant truncate on table "public"."news" to "service_role";

grant update on table "public"."news" to "service_role";

create policy "tenant_isolation"
on "public"."news"
as permissive
for all
to public
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));


CREATE OR REPLACE FUNCTION public.news_search_fields(news)
 RETURNS text
 LANGUAGE sql
AS $function$
  SELECT $1.title || ' ' || $1.body;
$function$
;

alter table "public"."tags" add column "modified_at" date;

CREATE OR REPLACE FUNCTION public.update_comment_count()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
  IF (TG_OP = 'INSERT') THEN
    IF NEW.source_type IS NOT NULL AND NEW.source_id IS NOT NULL THEN
      IF NEW.source_type = 'questions' THEN
        UPDATE questions SET comment_count = comment_count + 1
        WHERE id = NEW.source_id;
      ELSIF NEW.source_type = 'research' THEN
        UPDATE research SET comment_count = comment_count + 1
        WHERE id = NEW.source_id;
      ELSIF NEW.source_type = 'news' THEN
        UPDATE news SET comment_count = comment_count + 1
        WHERE id = NEW.source_id;
      ELSIF NEW.source_type = 'howtos' THEN
        UPDATE howtos SET comment_count = comment_count + 1
        WHERE id = NEW.source_id;
      END IF;
    ELSE
      RAISE NOTICE 'Warning: source_type or source_id is NULL';
    END IF;

  ELSIF (TG_OP = 'DELETE') THEN
    IF OLD.source_type IS NOT NULL AND OLD.source_id IS NOT NULL THEN
      IF OLD.source_type = 'questions' THEN
        UPDATE questions SET comment_count = comment_count - 1
        WHERE id = OLD.source_id;
      ELSIF OLD.source_type = 'research' THEN
        UPDATE research SET comment_count = comment_count - 1
        WHERE id = OLD.source_id;
      ELSIF OLD.source_type = 'news' THEN
        UPDATE news SET comment_count = comment_count - 1
        WHERE id = OLD.source_id;
      ELSIF OLD.source_type = 'howtos' THEN
        UPDATE howtos SET comment_count = comment_count - 1
        WHERE id = OLD.source_id;
      END IF;
    ELSE
      RAISE NOTICE 'Warning: OLD.source_type or OLD.source_id is NULL';
    END IF;
  END IF;

  -- Explicit return for the trigger function
  RETURN NULL;
END;$function$
;

CREATE OR REPLACE TRIGGER update_comment_count AFTER INSERT OR DELETE ON public.comments FOR EACH ROW EXECUTE FUNCTION update_comment_count();

create policy "tenant_isolation"
on "storage"."objects"
as permissive
for all
to public
using ((bucket_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));

alter table "public"."news" drop column "fts";

alter table "public"."news" add column "summary" text;

alter table "public"."news" add column "fts" tsvector generated always as (to_tsvector('english'::regconfig, ((title || ' '::text) || body || (summary || ''::text)))) stored;
