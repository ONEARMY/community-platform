create type "public"."notification_action_types" as enum ('newComment', 'newContent');


create type "public"."notification_source_content_type" as enum ('news', 'research', 'researchUpdate', 'library', 'questions');

create type "public"."notification_content_types" as enum ('news', 'research', 'researchUpdate', 'library', 'questions', 'comment', 'reply');

create table "public"."notifications" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "modified_at" timestamp with time zone default (now() AT TIME ZONE 'utc'::text),
    "owned_by_id" bigint not null,
    "triggered_by_id" bigint not null,
    "content_type" notification_content_types not null,
    "content_id" bigint not null,
    "is_read" boolean default false,
    "action_type" notification_action_types not null,
    "tenant_id" text not null,
    "source_content_type" notification_source_content_type not null,
    "source_content_id" bigint not null
);


alter table "public"."notifications" enable row level security;

alter table "public"."profiles" add column "notifications" uuid[];

CREATE UNIQUE INDEX notifications_pkey ON public.notifications USING btree (id);

alter table "public"."notifications" add constraint "notifications_pkey" PRIMARY KEY using index "notifications_pkey";

alter table "public"."notifications" add constraint "notifications_owned_by_id_fkey" FOREIGN KEY (owned_by_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."notifications" validate constraint "notifications_owned_by_id_fkey";

alter table "public"."notifications" add constraint "notifications_triggered_by_id_fkey" FOREIGN KEY (triggered_by_id) REFERENCES profiles(id) ON UPDATE CASCADE not valid;

alter table "public"."notifications" validate constraint "notifications_triggered_by_id_fkey";

grant delete on table "public"."notifications" to "anon";

grant insert on table "public"."notifications" to "anon";

grant references on table "public"."notifications" to "anon";

grant select on table "public"."notifications" to "anon";

grant trigger on table "public"."notifications" to "anon";

grant truncate on table "public"."notifications" to "anon";

grant update on table "public"."notifications" to "anon";

grant delete on table "public"."notifications" to "authenticated";

grant insert on table "public"."notifications" to "authenticated";

grant references on table "public"."notifications" to "authenticated";

grant select on table "public"."notifications" to "authenticated";

grant trigger on table "public"."notifications" to "authenticated";

grant truncate on table "public"."notifications" to "authenticated";

grant update on table "public"."notifications" to "authenticated";

grant delete on table "public"."notifications" to "service_role";

grant insert on table "public"."notifications" to "service_role";

grant references on table "public"."notifications" to "service_role";

grant select on table "public"."notifications" to "service_role";

grant trigger on table "public"."notifications" to "service_role";

grant truncate on table "public"."notifications" to "service_role";

grant update on table "public"."notifications" to "service_role";

create policy "tenant_isolation"
on "public"."notifications"
as permissive
for all
to public
using ((tenant_id = ((current_setting('request.headers'::text, true))::json ->> 'x-tenant-id'::text)));



