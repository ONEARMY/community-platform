CREATE TABLE IF NOT EXISTS "public"."news" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "created_by" bigint,
    "deleted" boolean,
    "modified_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text"),
    "comment_count" bigint DEFAULT '0'::bigint,
    "body" "text" NOT NULL,
    "moderation" "text",
    "slug" "text" NOT NULL,
    "previous_slugs" "text"[],
    "category" bigint,
    "tags" bigint[],
    "title" "text" NOT NULL,
    "total_views" bigint,
    "tenant_id" "text" NOT NULL,
    "hero_image" "json",
    "summary" "text",
    "fts" "tsvector" GENERATED ALWAYS AS ("to_tsvector"('"english"'::"regconfig", ((("title" || ' '::"text") || "body") || ("summary" || ''::"text")))) STORED,
    "is_draft" boolean DEFAULT false NOT NULL,
    "profile_badge" bigint
);

CREATE OR REPLACE FUNCTION "public"."news_search_fields"("public"."news") RETURNS "text"
    LANGUAGE "sql"
    SET search_path = public, pg_temp
    AS $_$
  SELECT $1.title || ' ' || $1.body;
$_$;

ALTER TABLE ONLY "public"."news"
    ADD CONSTRAINT "news_tenant_id_slug_key" UNIQUE ("tenant_id", "slug");

CREATE INDEX "news_category_idx" ON "public"."news" USING "btree" ("category");
CREATE INDEX "news_created_by_idx" ON "public"."news" USING "btree" ("created_by");
CREATE INDEX "news_deleted_moderation_category_total_views_tags_created_a_idx" ON "public"."news" USING "btree" ("deleted", "moderation", "category", "total_views", "tags", "created_at", "comment_count", "created_by");
CREATE INDEX "news_tags_idx" ON "public"."news" USING "gin" ("tags");

ALTER TABLE ONLY "public"."news"
    ADD CONSTRAINT "news_category_fkey" FOREIGN KEY ("category") REFERENCES "public"."categories"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."news"
    ADD CONSTRAINT "news_created_by_fkey" FOREIGN KEY ("created_by") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."news"
    ADD CONSTRAINT "news_profile_badge_fkey" FOREIGN KEY ("profile_badge") REFERENCES "public"."profile_badges"("id") ON DELETE SET NULL;

ALTER TABLE "public"."news" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "tenant_isolation" ON "public"."news" USING (("tenant_id" = (SELECT (("current_setting"('request.headers'::"text", true))::"json" ->> 'x-tenant-id'::"text"))));
