CREATE TABLE IF NOT EXISTS "public"."profile_badges" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" "text" NOT NULL,
    "display_name" "text" NOT NULL,
    "image_url" "text" NOT NULL,
    "action_url" "text",
    "tenant_id" "text" NOT NULL
);

CREATE TABLE IF NOT EXISTS "public"."profile_badges_relations" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "profile_id" bigint NOT NULL,
    "profile_badge_id" bigint NOT NULL,
    "tenant_id" "text" NOT NULL
);

CREATE TABLE IF NOT EXISTS "public"."profile_tags" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "name" "text" NOT NULL,
    "tenant_id" "text" NOT NULL,
    "profile_type" "text"
);

CREATE TABLE IF NOT EXISTS "public"."profile_tags_relations" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "profile_id" bigint NOT NULL,
    "profile_tag_id" bigint NOT NULL,
    "tenant_id" "text" NOT NULL
);

CREATE TABLE IF NOT EXISTS "public"."profile_types" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" "text" NOT NULL,
    "display_name" "text" NOT NULL,
    "order" smallint NOT NULL,
    "image_url" "text" NOT NULL,
    "small_image_url" "text" NOT NULL,
    "description" "text" NOT NULL,
    "map_pin_name" "text" NOT NULL,
    "is_space" boolean NOT NULL,
    "tenant_id" "text" NOT NULL
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "firebase_auth_id" "text",
    "display_name" "text" NOT NULL,
    "country" "text",
    "about" "text",
    "tenant_id" "text" NOT NULL,
    "username" "text" DEFAULT ''::"text" NOT NULL,
    "roles" "text"[],
    "impact" "json",
    "is_blocked_from_messaging" boolean,
    "is_contactable" boolean default true,
    "is_supporter" boolean,
    "patreon" "json",
    "total_views" integer,
    "type" "text",
    "auth_id" "uuid",
    "legacy_id" "text",
    "cover_images" "json"[],
    "last_active" timestamp with time zone,
    "photo" "json",
    "visitor_policy" "json",
    "website" "text",
    "profile_type" bigint
);

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_auth_id_tenant_id_key" UNIQUE ("auth_id", "tenant_id");

CREATE INDEX "idx_profile_badges_relations_badge_id" ON "public"."profile_badges_relations" USING "btree" ("profile_badge_id");
CREATE INDEX "idx_profile_badges_relations_profile_id" ON "public"."profile_badges_relations" USING "btree" ("profile_id");
CREATE INDEX "idx_profile_badges_relations_tenant_id" ON "public"."profile_badges_relations" USING "btree" ("tenant_id");
CREATE INDEX "idx_profile_badges_tenant_id" ON "public"."profile_badges" USING "btree" ("tenant_id");
CREATE INDEX "idx_profile_tags_relations_profile_id" ON "public"."profile_tags_relations" USING "btree" ("profile_id");
CREATE INDEX "idx_profile_tags_relations_tag_id" ON "public"."profile_tags_relations" USING "btree" ("profile_tag_id");
CREATE INDEX "idx_profile_tags_relations_tenant_id" ON "public"."profile_tags_relations" USING "btree" ("tenant_id");
CREATE INDEX "idx_profile_tags_tenant_id" ON "public"."profile_tags" USING "btree" ("tenant_id");
CREATE INDEX "idx_profile_types_tenant_id" ON "public"."profile_types" USING "btree" ("tenant_id");
CREATE INDEX "idx_profiles_profile_type" ON "public"."profiles" USING "btree" ("profile_type");

CREATE INDEX "profile_badges_relations_profile_tenant_idx" ON "public"."profile_badges_relations" USING "btree" ("profile_id", "tenant_id");
CREATE INDEX "profile_tags_relations_profile_tenant_idx" ON "public"."profile_tags_relations" USING "btree" ("profile_id", "tenant_id");
CREATE INDEX "profiles_firebase_auth_id_idx" ON "public"."profiles" USING "btree" ("firebase_auth_id");
CREATE INDEX "profiles_tenant_created_at_idx" ON "public"."profiles" USING "btree" ("tenant_id", "created_at" DESC);

ALTER TABLE ONLY "public"."profile_badges_relations"
    ADD CONSTRAINT "profile_badges_relations_profile_badge_id_fkey" FOREIGN KEY ("profile_badge_id") REFERENCES "public"."profile_badges"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profile_badges_relations"
    ADD CONSTRAINT "profile_badges_relations_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profile_tags_relations"
    ADD CONSTRAINT "profile_tags_relations_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profile_tags_relations"
    ADD CONSTRAINT "profile_tags_relations_profile_tag_id_fkey" FOREIGN KEY ("profile_tag_id") REFERENCES "public"."profile_tags"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_auth_id_fkey" FOREIGN KEY ("auth_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_profile_type_fkey" FOREIGN KEY ("profile_type") REFERENCES "public"."profile_types"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE "public"."profile_badges" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profile_badges_relations" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profile_tags" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profile_tags_relations" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profile_types" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "tenant_isolation" ON "public"."profile_badges" USING (("tenant_id" = ((SELECT current_setting('request.headers'::"text", true))::"json" ->> 'x-tenant-id'::"text")));
CREATE POLICY "tenant_isolation" ON "public"."profile_badges_relations" USING (("tenant_id" = ((SELECT current_setting('request.headers'::"text", true))::"json" ->> 'x-tenant-id'::"text")));
CREATE POLICY "tenant_isolation" ON "public"."profile_tags" USING (("tenant_id" = ((SELECT current_setting('request.headers'::"text", true))::"json" ->> 'x-tenant-id'::"text")));
CREATE POLICY "tenant_isolation" ON "public"."profile_tags_relations" USING (("tenant_id" = ((SELECT current_setting('request.headers'::"text", true))::"json" ->> 'x-tenant-id'::"text")));
CREATE POLICY "tenant_isolation" ON "public"."profile_types" USING (("tenant_id" = ((SELECT current_setting('request.headers'::"text", true))::"json" ->> 'x-tenant-id'::"text")));
CREATE POLICY "tenant_isolation" ON "public"."profiles" USING (("tenant_id" = ((SELECT current_setting('request.headers'::"text", true))::"json" ->> 'x-tenant-id'::"text")));

CREATE OR REPLACE FUNCTION "public"."is_username_available"("username" "text") RETURNS boolean
    LANGUAGE "sql" STABLE SECURITY DEFINER
    SET search_path = public, pg_temp
    AS $_$
  SELECT NOT EXISTS (SELECT 1 FROM profiles WHERE username = $1);
$_$;
